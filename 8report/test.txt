ty_subst [(1,TyInt); (2,TyVar(4))] TyInt
ty_subst [(1,TyInt); (2,TyVar(4))] TyBool
ty_subst [(1,TyInt); (2,TyVar(4))] (TyVar(2))
ty_subst [(1,TyInt); (2,TyVar(4))] (TyFun(TyVar(2), TyInt))
ty_subst [(1,TyInt); (2,TyVar(4))] (TyFun(TyVar(2), TyVar(1)))



let sig1 = [(1,TyInt);(2,TyVar(4))];; 
let sig2 = [(5,TyBool);(9,TyVar(1));(3,TyBool);(6,TyFun(TyInt,TyBool))]

# compose sig1 sig2;;
- : (tyvar * ty) list =
[(1, TyInt); (2, TyVar 4); (5, TyBool); (9, TyInt); (3, TyBool);(6, TyFun (TyInt, TyBool))]


ty_unify [(TyVar(1),TyInt);(TyVar(2), TyFun(TyVar(1),TyVar(1)))]
- : (tyvar * ty) list = [(2, TyFun (TyInt, TyInt)); (1, TyInt)]

ty_unify [(TyInt,TyFun(TyInt,TyVar(1)))]
Exception: TyError.

ty_unify [(TyFun(TyInt,TyInt),(TyFun(TyVar(1),TyVar(2))))]
- : (tyvar * ty) list = [(1, TyInt); (2, TyInt)]

ty_unify [(TyFun (TyVar(1),TyVar(2) ),(TyFun(TyVar(2),TyVar(3) ))); (TyVar(3), TyFun (TyVar(4),TyVar(5)))]
- : (tyvar * ty) list =
[(3, TyFun (TyVar 4, TyVar 5)); (1, TyFun (TyVar 4, TyVar 5)); (2, TyFun (TyVar 4, TyVar 5))]

ty_unify [(TyFun (TyVar(1),TyVar(1)) , TyFun (TyVar(2), TyVar(3))); (TyVar(3), TyFun(TyInt,TyVar(2)))] 
Exception: TyError.


