１
ocamlyacc parser.mly
で
parser.mlとparser.mliが作られる。
ocamlyaccでは、トークン列から抽象構文木にしている。
文法を木にしている。
すなわち、 parser.mlyには文法が定義されている。
parser.mly を受け取って、parser.mlとparser.mliを作っている。

parser.mlとparser.mliの中身は抽象構文木っぽい

２
ocamllex lexer.mll
で
lexer.mlが作られる。
この操作では、プログラムから字句解析器が作られる。
lexer.mllには、プログラムを文字列としてみて、その文字一つ一つに対して、どうしていくかが書かれている。

３
ocamlc –c syntax.ml
で
syntax.mlから実行ファイル(.cmoと.cmiが作られる）

4
ocamlc –c parser.mli
ocmalc –c parser.ml
parserに対する実行ファイルの作成。

5
ocamlc -c lexer.ml
で

3-5をこの順番で行う理由は、
プログラムが、字句解析器（5でコンパイルしたやつ）を通って、トークン列となり、
トークン列が、構文解析器（４でコンパイルしたやつ）を通って、抽象構文木となり、
抽象構文木にしたがって、計算するプログラム（3でコンパイルしたやつ）を介して、評価が行われるからである。

6
ocamlc –c example.ml
実際に実行を行う、プログラムの作成。この辺の理解はまだ曖昧。

7
依存関係を気にしつつ、
 ocamlc –o example syntax.cmo parser.cmo lexer.cmo example.cmo





