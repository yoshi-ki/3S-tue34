#load "constraintSolver.cmo";;
# #load "tySyntax.cmo";;

open TySyntax;;
# open ConstraintSolver;;

let alpha = TyVar (new_tyvar ());;
let beta = TyVar (new_tyvar());;
let ganma = TyVar (new_tyvar());;
let delta = TyVar (new_tyvar ());;
let epsilon = TyVar (new_tyvar());;




# #load "constraintSolver.cmo";;
# #load "tySyntax.cmo";;
# let epsilon = TyVar (new_tyvar());;
Error: Unbound constructor TyVar
# open TySyntax;;
# open ConstraintSolver;;
# let alpha = TyVar (new_tyvar ());;
val alpha : TySyntax.ty = TyVar <abstr>
# let beta = TyVar (new_tyvar());;
val beta : TySyntax.ty = TyVar <abstr>
# let ganma = TyVar (new_tyvar());;
val ganma : TySyntax.ty = TyVar <abstr>
# let delta = TyVar (new_tyvar ());;
val delta : TySyntax.ty = TyVar <abstr>
# let epsilon = TyVar (new_tyvar());;
val epsilon : TySyntax.ty = TyVar <abstr>
# let f = TySyntax.ty (new_tyvar ());;
Error: Unbound value TySyntax.ty
# let f = TyVar (new_tyvar());;
val f : TySyntax.ty = TyVar <abstr>
# let g = TyVar (new_tyvar());;
val g : TySyntax.ty = TyVar <abstr>
# let x = TyVar (new_tyvar());;
val x : TySyntax.ty = TyVar <abstr>
# [(f,alpha);(g,beta);(x,ganma);(alpha,TyFun(epsilon,delta));(beta,TyFun(ganma,e# [(f,alpha);(g,beta);(x,ganma);(alpha,TyFun(epsilon,delta));(beta,TyFun(ganganma,epsilon));];;
Error: Unbound value ganganma
Hint: Did you mean ganma?
# [(f,alpha);(g,beta);(x,ganma);(alpha,TyFun(epsilon,delta));(beta,TyFun(ganma,epsilon));];;
- : (TySyntax.ty * TySyntax.ty) list =
[(TyVar <abstr>, TyVar <abstr>); (TyVar <abstr>, TyVar <abstr>);
 (TyVar <abstr>, TyVar <abstr>);
 (TyVar <abstr>, TyFun (TyVar <abstr>, TyVar <abstr>));
 (TyVar <abstr>, TyFun (TyVar <abstr>, TyVar <abstr>))]
# let constraints = [(f,alpha);(g,beta);(x,ganma);(alpha,TyFun(epsilon,delta));(beta,TyFun(ganma,epsilon));];;
val constraints : (TySyntax.ty * TySyntax.ty) list =
  [(TyVar <abstr>, TyVar <abstr>); (TyVar <abstr>, TyVar <abstr>);
   (TyVar <abstr>, TyVar <abstr>);
   (TyVar <abstr>, TyFun (TyVar <abstr>, TyVar <abstr>));
   (TyVar <abstr>, TyFun (TyVar <abstr>, TyVar <abstr>))]
# ty_subst (unify constraints);;
- : TySyntax.ty -> TySyntax.ty = <fun>
# print_type(ty_subst (unify constraints));;
Error: This expression has type TySyntax.ty -> TySyntax.ty
       but an expression was expected of type TySyntax.ty
# let ans = unify constraints;;
val ans : ConstraintSolver.subst = <abstr>
# ty_subst (ans, ganma);;
Error: This expression has type 'a * 'b
       but an expression was expected of type ConstraintSolver.subst
# ty_subst (ans, f);;
Error: This expression has type 'a * 'b
       but an expression was expected of type ConstraintSolver.subst
# ans;;
- : ConstraintSolver.subst = <abstr>
# f;;
- : TySyntax.ty = TyVar <abstr>
# ty_subst ans f;;
- : TySyntax.ty = TyFun (TyVar <abstr>, TyVar <abstr>)
# print_type (ty_subst ans f);;
('a5 -> 'a4)- : unit = ()
# print_type (ty_subst ans x);;
'a3- : unit = ()
# print_type (ty_subst ans g);;
('a3 -> 'a5)- : unit = ()
# print_type (ty_subst ans ganma);;
'a3- : unit = ()
# print_type (ty_subst ans beta);;
('a3 -> 'a5)- : unit = ()
# let functi = TyFun(f,TyFun(g,TyFun(x,f(g x))));;
Error: This expression has type TySyntax.ty
       This is not a function; it cannot be applied.
# let functi = TyFun(f,TyFun(g,x));;
val functi : TySyntax.ty =
  TyFun (TyVar <abstr>, TyFun (TyVar <abstr>, TyVar <abstr>))
# print_type (ty_subst ans functi);;
(('a5 -> 'a4) -> (('a3 -> 'a5) -> 'a3))- : unit = ()
# print_type (ty_subst ans TyFun (alpha ,TyFun(beta,TyFun(ganma,delta))));;
Error: This function has type
         ConstraintSolver.subst -> TySyntax.ty -> TySyntax.ty
       It is applied to too many arguments; maybe you forgot a `;'.
# TyFun (alpha ,TyFun(beta,TyFun(ganma,delta)));;
- : TySyntax.ty =
TyFun (TyVar <abstr>,
 TyFun (TyVar <abstr>, TyFun (TyVar <abstr>, TyVar <abstr>)))
# let ggg = TyFun (alpha ,TyFun(beta,TyFun(ganma,delta)));;
val ggg : TySyntax.ty =
  TyFun (TyVar <abstr>,
   TyFun (TyVar <abstr>, TyFun (TyVar <abstr>, TyVar <abstr>)))
# print_type(ty_subst ans ggg);;
(('a5 -> 'a4) -> (('a3 -> 'a5) -> ('a3 -> 'a4)))- : unit = ()
